%{
(* auto-generated by gt *)

   open Gra2srs_syntax;;
let parse_error s =
	 let error = s^(Gra2srs_util.string_of_pos (Gra2srs_util.cur_pd())) in failwith error;;

%}

%start main

%token EOF
%token <Gra2srs_syntax.__term_not_in_ast__> ARROW BANG BAR COLON COMMA DOT LEXICAL LP LS MINUS PLUS QMARK RP RS RULES STAR START SYNTACTIC THICKARROW TILDE VARS WHITESPACE
%token <Gra2srs_syntax.__terminal__> ID STRING_LIT

%type <Gra2srs_syntax.grammar option> main
%type <Gra2srs_syntax.args> args
%type <Gra2srs_syntax.args_args_comma0> args_args_comma0
%type <Gra2srs_syntax.atom> atom
%type <Gra2srs_syntax.charset_atom_charset_prim2> charset_atom_charset_prim2
%type <Gra2srs_syntax.charset_atom_tilde1> charset_atom_tilde1
%type <Gra2srs_syntax.charset_prim> charset_prim
%type <Gra2srs_syntax.form> form
%type <Gra2srs_syntax.forma> forma
%type <Gra2srs_syntax.grammar> grammar
%type <Gra2srs_syntax.grammar_grammar_id10> grammar_grammar_id10
%type <Gra2srs_syntax.grammar_grammar_lex8> grammar_grammar_lex8
%type <Gra2srs_syntax.grammar_grammar_lexical7> grammar_grammar_lexical7
%type <Gra2srs_syntax.grammar_grammar_prod6> grammar_grammar_prod6
%type <Gra2srs_syntax.grammar_grammar_rule12> grammar_grammar_rule12
%type <Gra2srs_syntax.grammar_grammar_rules11> grammar_grammar_rules11
%type <Gra2srs_syntax.grammar_grammar_syntactic5> grammar_grammar_syntactic5
%type <Gra2srs_syntax.grammar_grammar_vars9> grammar_grammar_vars9
%type <Gra2srs_syntax.grammar_grammar_whitespace4> grammar_grammar_whitespace4
%type <Gra2srs_syntax.lex> lex
%type <Gra2srs_syntax.lex_lex_form13> lex_lex_form13
%type <Gra2srs_syntax.lex_op> lex_op
%type <Gra2srs_syntax.post> post
%type <Gra2srs_syntax.prim> prim
%type <Gra2srs_syntax.prod> prod
%type <Gra2srs_syntax.prod_prod_form14> prod_prod_form14
%type <Gra2srs_syntax.produnnamed_prod_form15> produnnamed_prod_form15
%type <Gra2srs_syntax.rule> rule
%type <Gra2srs_syntax.seq_forma_atom3> seq_forma_atom3
%type <Gra2srs_syntax.term> term
%type <Gra2srs_util.pd> cur_position

%%



main:
	| grammar { Some($1) }
	| EOF { None }



cur_position:
| { Gra2srs_util.cur_pd() }

args:
  | cur_position { Empty($1) }

args:
  | term args_args_comma0 { Args(pd_term $1, $1, $2) }

atom:
  | prim post { Id(pd_prim $1, $1, $2) }

atom:
  | charset_atom_tilde1 LS charset_atom_charset_prim2 RS post { Charset(pd_charset_atom_tilde1 $1, $1, $2, $3, $4, $5) }

atom:
  | BANG { Marker(get_term_pd_not_in_ast $1, $1) }

atom:
  | LP form RP post { Paren(get_term_pd_not_in_ast $1, $1, $2, $3, $4) }

charset_prim:
  | STRING_LIT MINUS STRING_LIT { Range(get_terminal_pd $1, $1, $2, $3) }

charset_prim:
  | STRING_LIT { Char(get_terminal_pd $1, $1) }

form:
  | forma BAR form { Bar(pd_forma $1, $1, $2, $3) }

form:
  | forma { Forma(pd_forma $1, $1) }

forma:
  | seq_forma_atom3 { Seq(pd_seq_forma_atom3 $1, $1) }

grammar:
  | ID START ID grammar_grammar_whitespace4 grammar_grammar_syntactic5 grammar_grammar_lexical7 grammar_grammar_vars9 grammar_grammar_rules11 { Grammar(get_terminal_pd $1, $1, $2, $3, $4, $5, $6, $7, $8) }

lex:
  | ID lex_op lex_lex_form13 DOT { Lex(get_terminal_pd $1, $1, $2, $3, $4) }

lex_op:
  | ARROW { LexArrow(get_term_pd_not_in_ast $1, $1) }

lex_op:
  | THICKARROW { LexThickArrow(get_term_pd_not_in_ast $1, $1) }

post:
  | STAR { Star(get_term_pd_not_in_ast $1, $1) }

post:
  | PLUS { Plus(get_term_pd_not_in_ast $1, $1) }

post:
  | QMARK { Qmark(get_term_pd_not_in_ast $1, $1) }

post:
  | cur_position { Plain($1) }

prim:
  | ID { PrimId(get_terminal_pd $1, $1) }

prim:
  | STRING_LIT { PrimStringLit(get_terminal_pd $1, $1) }

prod:
  | ID COLON ID ARROW prod_prod_form14 DOT { Prod(get_terminal_pd $1, $1, $2, $3, $4, $5, $6) }

prod:
  | ID ARROW produnnamed_prod_form15 DOT { ProdUnnamed(get_terminal_pd $1, $1, $2, $3, $4) }

rule:
  | term ARROW term { Rule(pd_term $1, $1, $2, $3) }

term:
  | ID LP args RP { App(get_terminal_pd $1, $1, $2, $3, $4) }

term:
  | ID { Sym(get_terminal_pd $1, $1) }

produnnamed_prod_form15:
  | cur_position { ($1, None) }

produnnamed_prod_form15:
  | form { (pd_form $1, Some( $1 )) }

prod_prod_form14:
  | cur_position { ($1, None) }

prod_prod_form14:
  | form { (pd_form $1, Some( $1 )) }

lex_lex_form13:
  | cur_position { ($1, None) }

lex_lex_form13:
  | form { (pd_form $1, Some( $1 )) }

grammar_grammar_rules11:
  | cur_position { ($1, None) }

grammar_grammar_rules11:
  | RULES grammar_grammar_rule12 { (get_term_pd_not_in_ast $1, Some( $1 , $2)) }

grammar_grammar_rule12:
  | cur_position { ($1, []) }

grammar_grammar_rule12:
  | rule grammar_grammar_rule12 { (pd_rule $1, ($1)::(snd $2)) }

grammar_grammar_vars9:
  | cur_position { ($1, None) }

grammar_grammar_vars9:
  | VARS grammar_grammar_id10 { (get_term_pd_not_in_ast $1, Some( $1 , $2)) }

grammar_grammar_id10:
  | cur_position { ($1, []) }

grammar_grammar_id10:
  | ID grammar_grammar_id10 { (get_terminal_pd $1, ($1)::(snd $2)) }

grammar_grammar_lexical7:
  | cur_position { ($1, None) }

grammar_grammar_lexical7:
  | LEXICAL grammar_grammar_lex8 { (get_term_pd_not_in_ast $1, Some( $1 , $2)) }

grammar_grammar_lex8:
  | cur_position { ($1, []) }

grammar_grammar_lex8:
  | lex grammar_grammar_lex8 { (pd_lex $1, ($1)::(snd $2)) }

grammar_grammar_syntactic5:
  | cur_position { ($1, None) }

grammar_grammar_syntactic5:
  | SYNTACTIC grammar_grammar_prod6 { (get_term_pd_not_in_ast $1, Some( $1 , $2)) }

grammar_grammar_prod6:
  | cur_position { ($1, []) }

grammar_grammar_prod6:
  | prod grammar_grammar_prod6 { (pd_prod $1, ($1)::(snd $2)) }

grammar_grammar_whitespace4:
  | cur_position { ($1, None) }

grammar_grammar_whitespace4:
  | WHITESPACE ID { (get_term_pd_not_in_ast $1, Some( $1 , $2)) }

seq_forma_atom3:
  | atom { (pd_atom $1, ($1)::[]) }

seq_forma_atom3:
  | atom seq_forma_atom3 { (pd_atom $1, ($1)::(snd $2)) }

charset_atom_charset_prim2:
  | cur_position { ($1, []) }

charset_atom_charset_prim2:
  | charset_prim charset_atom_charset_prim2 { (pd_charset_prim $1, ($1)::(snd $2)) }

charset_atom_tilde1:
  | cur_position { ($1, None) }

charset_atom_tilde1:
  | TILDE { (get_term_pd_not_in_ast $1, Some( $1 )) }

args_args_comma0:
  | cur_position { ($1, []) }

args_args_comma0:
  | COMMA term args_args_comma0 { (get_term_pd_not_in_ast $1, ($1, $2)::(snd $3)) }
